// Copyright (c) 2003-2023 Broad Institute, Inc., Massachusetts Institute of Technology, and Regents 
// of the University of California. All rights reserved.
apply plugin: 'java'
import org.apache.tools.ant.filters.ReplaceTokens

ext.moduleName = 'org.gsea_msigdb.gsea'
ext.mainClassName = 'xapps.gsea.GSEA'

configurations {
    jidePatchModuleLibs
}

dependencies {
    compile fileTree(dir: 'modules', include: '*.jar')
    jidePatchModuleLibs fileTree(dir: 'lib', include: '*.jar')
}

task wrapper(type: Wrapper) {
    gradleVersion = '8.2'
}

processResources {
    // Set the current timestamp for release builds; pass in a blank property to enable (i.e. -Ptimestamp="" at CLI)
    if (timestamp.equals("")) { timestamp = new Date().format("EEE, d MMM yyyy HH:mm:ss Z") }

    filesMatching('edu/mit/broad/genome/resources/build.properties') {
        filter (ReplaceTokens,
                tokens: [ VERSION: version, VERSION_MAJOR: versionMajor, VERSION_MINOR: versionMinor, VERSION_PATCH: versionPatch,
                          BUILD: buildNumber, TIMESTAMP: timestamp ])
    }
}

jar {
    archiveName = "gsea-minimal-${version}.jar"
    manifest {
        attributes(
            "Permissions": "all-permissions",
            "Application-Name": "GSEA",
            "Built-By": System.getProperty('user.name'),
            "GSEA-Build-Date": timestamp,
            "Main-Class": mainClassName,
        )
    }
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
            '--module-path', classpath.asPath,
            '--patch-module=jide.common=' + configurations.jidePatchModuleLibs.asPath,
            "--add-exports=jide.common/com.jidesoft.grid=${moduleName}",
            "--add-exports=jide.common/com.jidesoft.docking=${moduleName}",
            "--add-exports=jide.common/com.jidesoft.status=${moduleName}"
        ]
        classpath = files()
    }
}

task createDist(type: Copy, dependsOn: jar)  {
    from ("src/main/resources/edu/mit/broad/genome/resources/icon_64x64.png")
    from ('scripts') {
        include 'gsea*'
        include 'logging.properties'
        include 'readme.txt'
        exclude 'mac.app'
        exclude 'nsis'
    }
    with copySpec {
        from ("${buildDir}/libs")
        from ("modules")
        into "modules"
    }
    with copySpec {
        from ("lib") into "lib"
    }
    into "${buildDir}/GSEA-dist"
}

task createDistZip(type: Zip, dependsOn: createDist) {
    archiveName = "GSEA_${version}.zip"
    destinationDir = file("${buildDir}/distZip")
    baseName = "GSEA"
    from "${buildDir}/GSEA-dist"
    into createDistZip.baseName + "_${version}"

    doLast {
        project.exec { commandLine('chmod', '775', createDistZip.archivePath ) }
    }
}

task createLinuxDistZip(type: Zip, dependsOn: createDist) {
    baseName = "GSEA_Linux"
    archiveName = createLinuxDistZip.baseName + "_${version}.zip"
    destinationDir = file("${buildDir}/distZip")
    if (!jdkBundleLinux.equals("")) {
        with copySpec { from jdkBundleLinux into "jdk-17" }
    }
    from ("${buildDir}/GSEA-dist") {
        exclude "*.bat"
        exclude "*.command"
    }
    into createLinuxDistZip.baseName + "_${version}"

    doLast {
        project.exec { commandLine('chmod', '775', createLinuxDistZip.archivePath ) }
    }
}

task createMacDistZip(type: Zip, dependsOn: createDist) {
    baseName = "GSEA_Mac"
    archiveName = createMacDistZip.baseName + "_${version}.zip"
    destinationDir = file("${buildDir}/distZip")
    if (!jdkBundleMac.equals("")) {
        with copySpec { from jdkBundleMac into "jdk-17" }
    }
    from ("${buildDir}/GSEA-dist") {
        exclude "*.bat"
        exclude "*_hidpi.sh"
    }
    into createMacDistZip.baseName + "_${version}"

    doLast {
        project.exec { commandLine('chmod', '775', createMacDistZip.archivePath ) }
    }
}

task createMacAppDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleMac.equals("")) {
        with copySpec { from jdkBundleMac into "GSEA_${version}.app/Contents/jdk-17" }
    }
    with copySpec {
        from ("scripts/mac.app") {
            exclude "Contents/Info.plist.template"
            exclude "Contents/MacOS/JavaAppLauncher"
        }
        into "GSEA_${version}.app"
    }
    with copySpec {
        from ("scripts/Info.plist.template")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
        rename "Info.plist.template", "Info.plist"
        into "GSEA_${version}.app/Contents"
    }
    with copySpec {
        from ("scripts/GSEA_mac.app_launcher")
        rename "GSEA_mac.app_launcher", "GSEA"
        into "GSEA_${version}.app/Contents/MacOS"
    }
    with copySpec {
        from ("src/main/resources/edu/mit/broad/genome/resources/icon_64x64.png")
        into "GSEA_${version}.app/Contents/Resources"
    }
    with copySpec {
        from ("${buildDir}/GSEA-dist/") include 'gsea.args'
        into "GSEA_${version}.app/Contents/Java/"
    }
    with copySpec {
        from ("${buildDir}/GSEA-dist/modules") include '*.jar'
        into "GSEA_${version}.app/Contents/Java/modules"
    }
    with copySpec {
        from ("${buildDir}/GSEA-dist/lib") include '*.jar'
        into "GSEA_${version}.app/Contents/Java/lib"
    }
    into "${buildDir}/GSEA-MacApp-dist"

    doLast {
        project.exec { commandLine('chmod', '775', "${buildDir}/GSEA-MacApp-dist/GSEA_${version}.app" ) }
    }
}

task createMacAppDistZip(type: Zip, dependsOn: createMacAppDist) {
    archiveName = "GSEA_MacApp_${version}.app.zip"
    destinationDir = file("${buildDir}/distZip")
    from "${buildDir}/GSEA-MacApp-dist"
    
    doLast {
        project.exec { commandLine('chmod', '775', createMacAppDistZip.archivePath ) }
    }
}

task createWinDist(type: Copy, dependsOn: createDist) {
    if (!jdkBundleWindows.equals("")) {
        with copySpec { from jdkBundleWindows into "GSEA_${version}/jdk-17" }
    }
    with copySpec {
        from("${buildDir}/GSEA-dist") {
            exclude "*.sh"
            exclude "*.command"
        }
        from ("scripts/nsis") { include "GSEA_Icon.ico" }
        into "GSEA_${version}"
    }
    with copySpec {
        // Create a build-specific NSIS installer script.
        from ("scripts/nsis/installer.nsi")
        filter (ReplaceTokens, tokens: [ VERSION: version ])
    }
    from ("scripts/nsis") { include "LICENSE_WIN.txt" }
    into "${buildDir}/GSEA-WinExe-dist"
}

task createWinExeDist(type: Exec, dependsOn: createWinDist) {
    commandLine(makensisCommand, "-O${buildDir}/tmp/nsis-build.log",
                "${buildDir}/GSEA-WinExe-dist/installer.nsi")
    doLast {
        if (makensisCommand.equals("")) {
            throw new GradleException("Required property not set: makensisCommand");
        }
    }
}
        
task signWinExeDist(type: Exec, dependsOn: createWinExeDist) {
    standardInput = new ByteArrayInputStream( keyPassword.getBytes() );
    commandLine(signcodeCommand, "-spc", spcFile, "-v", pvkFile, "-a", "sha512", 
                "-\$", "commercial", "-n", "GSEA ${version}", "-i", "http://www.gsea-msigdb.org/",
                "-t", tsaurl, "-tr", "10", "${buildDir}/GSEA-WinExe-dist/GSEA_Win_${version}-installer.exe")
    doLast {
        if (signcodeCommand.equals("")) {
            throw new GradleException("Required property not set: signcodeCommand");
        }
    }
}

build.dependsOn createDistZip,createLinuxDistZip,createMacAppDistZip

if (!makensisCommand.equals("") && !signcodeCommand.equals("")) {
    build.dependsOn signWinExeDist
}